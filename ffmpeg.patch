diff --git a/libavcodec/mpegvideo.c b/libavcodec/mpegvideo.c
index a9024a9..37f2e05 100644
--- a/libavcodec/mpegvideo.c
+++ b/libavcodec/mpegvideo.c
@@ -2110,8 +2110,10 @@ void ff_print_debug_info2(AVCodecContext *avctx, AVFrame *pict, uint8_t *mbskip_
                          int mb_width, int mb_height, int mb_stride, int quarter_sample)
 {
     if (avctx->hwaccel || !mbtype_table
-        || (avctx->codec->capabilities&CODEC_CAP_HWACCEL_VDPAU))
+        || (avctx->codec->capabilities&CODEC_CAP_HWACCEL_VDPAU)) {
+        printf("#ff_print_debug_info2() exit early");
         return;
+    }
 
 
     if (avctx->debug & (FF_DEBUG_SKIP | FF_DEBUG_QP | FF_DEBUG_MB_TYPE)) {
@@ -2207,6 +2209,8 @@ void ff_print_debug_info2(AVCodecContext *avctx, AVFrame *pict, uint8_t *mbskip_
         ptr          = pict->data[0];
         block_height = 16 >> v_chroma_shift;
 
+        printf("NEWFRAME;num=%d;width=%d;height=%d\n", avctx->frame_number, width, height);
+
         for (mb_y = 0; mb_y < mb_height; mb_y++) {
             int mb_x;
             for (mb_x = 0; mb_x < mb_width; mb_x++) {
@@ -2235,10 +2239,18 @@ void ff_print_debug_info2(AVCodecContext *avctx, AVFrame *pict, uint8_t *mbskip_
                             direction = 1;
                             break;
                         }
-                        if (!USES_LIST(mbtype_table[mb_index], direction))
+                        if (!USES_LIST(mbtype_table[mb_index], direction)) {
+                            //printf("#!USES_LIST(mbtype_table[mb_index], direction)\n");
                             continue;
+                        }
+
+                        //printf("processing macroblock %d,%d\n", mb_x, mb_y);
+                        printf("MACROBLOCK;x=%d;y=%d\n", mb_x, mb_y);
+
+                        printf("VECTORBLOCK;size=");
 
                         if (IS_8X8(mbtype_table[mb_index])) {
+                            printf("4;type=8x8;\n");
                             int i;
                             for (i = 0; i < 4; i++) {
                                 int sx = mb_x * 16 + 4 + 8 * (i & 1);
@@ -2249,8 +2261,11 @@ void ff_print_debug_info2(AVCodecContext *avctx, AVFrame *pict, uint8_t *mbskip_
                                 int my = (motion_val[direction][xy][1] >> shift) + sy;
                                 draw_arrow(ptr, sx, sy, mx, my, width,
                                            height, pict->linesize[0], 100, 0, direction);
+
+                                printf("VECTOR;sx=%d;sy=%d;mx=%d;my=%d\n", sx, sy, mx, my);
                             }
                         } else if (IS_16X8(mbtype_table[mb_index])) {
+                            printf("2;type=16x8;\n");
                             int i;
                             for (i = 0; i < 2; i++) {
                                 int sx = mb_x * 16 + 8;
@@ -2264,8 +2279,11 @@ void ff_print_debug_info2(AVCodecContext *avctx, AVFrame *pict, uint8_t *mbskip_
 
                                 draw_arrow(ptr, sx, sy, mx + sx, my + sy, width,
                                            height, pict->linesize[0], 100, 0, direction);
+
+                                printf("VECTOR;sx=%d;sy=%d;mx=%d;my=%d\n", sx, sy, mx + sx, my + sy);
                             }
                         } else if (IS_8X16(mbtype_table[mb_index])) {
+                            printf("2;type=8x16;\n");
                             int i;
                             for (i = 0; i < 2; i++) {
                                 int sx = mb_x * 16 + 4 + 8 * i;
@@ -2279,14 +2297,19 @@ void ff_print_debug_info2(AVCodecContext *avctx, AVFrame *pict, uint8_t *mbskip_
 
                                 draw_arrow(ptr, sx, sy, mx + sx, my + sy, width,
                                            height, pict->linesize[0], 100, 0, direction);
+
+                                printf("VECTOR;sx=%d;sy=%d;mx=%d;my=%d\n", sx, sy, mx + sx, my + sy);
                             }
                         } else {
+                              printf("1;type=16x16;\n");
                               int sx= mb_x * 16 + 8;
                               int sy= mb_y * 16 + 8;
                               int xy= (mb_x + mb_y * mv_stride) << mv_sample_log2;
                               int mx= (motion_val[direction][xy][0]>>shift) + sx;
                               int my= (motion_val[direction][xy][1]>>shift) + sy;
                               draw_arrow(ptr, sx, sy, mx, my, width, height, pict->linesize[0], 100, 0, direction);
+
+                              printf("VECTOR;sx=%d;sy=%d;mx=%d;my=%d\n", sx, sy, mx, my);
                         }
                     }
                 }
